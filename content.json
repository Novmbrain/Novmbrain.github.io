{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/12/27/hello-world/"},{"title":"小白也能有自己的博客！！","text":"作为一名菜鸟程序员，总要找点东西提升提升自己的调调，拥有一个属于自己的博客貌似是一件很酷酷的事。在一天的折腾后，俺滴博客，“Vent Breton”上线啦！ 这篇文章作为我的博客搭建过程记录，同时也是一个博客搭建教程。大家好，我是渣渣辉，是小白，就来动手搭博客。 环境准备整体来说，博客搭建是借助敲好看博客框架Hexo与世界上最著名的同性交友平台GitHub完成的，同时还需要安装一些附加的组件，但是过程的很简单，傻瓜式点点点就好了。以下为博客搭建会用到的所有工具 Hexo Nodej.js Git 安装Hexo之前的准备在安装Hexo之前，需要安装Node.js以及Git Node.js安装首先，不要问我Node.js是什么，我也不太清楚（小白身份暴露无遗），但是不知道不代表不能用，以下我复制一段维基百科关于Node.js介绍，蛮看看就行 Node.js 是能够在伺服器端运行 JavaScript 的开放原始码、跨平台 JavaScript 执行环境。 具体安装过程也很简单，标准流程： 搜索官网 -&gt; 下载对应环境的安装包 -&gt; 打开傻瓜式安装 搜索官网：啊这，这应该不用解释了 下载对应环境的安装包： 通常大家在Windows和macOS之间选择，注意一下自己的电脑是32-bit还是64-bit就行 打开傻瓜式安装： 注意一下别都装C盘，考虑考虑C盘小可爱的感受，其次就是按照默认选项，一路点点点即可 Git安装Git这东西，确实还是需要了解一下的。简而言之，Linux之父随手开发的玩意，用来控制Linux核心的版本。现在成为了最著名的版本控制软件。 具体安装过程，照样是标准流程。从Git官网直接下载安装程序，然后按照默认选项安装即可。 在安装成功之后，在开始菜单点开“Git” -&gt; “Git Bash”,会调用Git的命令行窗口，这时候说明你已经成功安装了Git 安装完成后，还需要最后一步设置，请在命令行输入（在图中光标处输入） 12$ git config --global user.name &quot;Your Name&quot; //Yourname填写你的名字$ git config --global user.email &quot;email@example.com //填写你的email 以下我廖雪峰大大写的Git教程的安装介绍，如果对Git有兴趣，或者安装操作不太清楚的胖友们，可以直接参考这个教程，写的灰常好。 安装Hexo最后主角Hexo出场！ 首先打开cmd（Windows的命令行），出现一个黑乎乎的框框。如果是在国内，因为墙的原因下载会导致下载速度很慢，所以我们首先改成国内镜像，在cmd中输入 12npm config set registry https://registry.npm.taobao.orgnpm config get registry//放过当前镜像，用于确认是否配置成功 然后安装Hero 1npm install hexo-cli -g 本地搭建博客博客初始化，选择一个盘，创建一个文件夹来储存博客的内容，比如我选择D:\\development_tools\\blogs。接着进入该文件夹，鼠标右键选择Git Bash Here，进入Git命令输入一下命令初始化博客 1$ hexo init 然后你会发现刚才用于储存博客内容的文件夹多了好多东西，这就对咯！因为其实我们所做的是先进入创建的文件夹，然后在这个文件价中进行初始化。 其实，这个时候你的博客已经搭建成功，能够在本地运行了，让我们来看看吧。输入一下命令 1$ hexo server 如果出现下面这个截图，就说明之前的努力都没白费啦！ ![image-20201227184108892](D:\\development_tools\\blogs\\source_posts\\hexo server截图.png) 打开任意一个浏览器，然后 输入上图最后一行的那个网址吧(http://localhost:4000),下图为博客页面 将本地博客部署到Github上接下来要做的才是最酷的，借助GitHub，让所有人都能看见你的博客。 创建GitHub仓库请问，有谁不知晓GitHub的大名？既然要用人家，好歹一注册一个账号 注册完成后，然后点击自己的头像，创建一个个人仓库，这将用于部署你的网站 然后干啥？New一个repository啦 ![image-20201227185427820](D:\\development_tools\\blogs\\source_posts\\new repository.png) 下面一步比较关键，在repository name这里有硬性的格式要求，不能够自由发挥。 格式：**yourname**.github.io 把yourname替换成自己的Github昵称，比如我的Respository name应该为： Novmbrain.github.io 仓库的可见性，选Public就好，符合开源精神嘛 将电脑与GitHub上的仓库连接现在我们在GitHub上有一个自己的仓库，我们的博客框架内容将会被放在这个仓库里，以及之后我们在本地写个博客也将会被放到这个仓库里。那么就需要将本地的电脑和GitHub上的仓库建立连接。 我们将使用SSH钥匙来建立和GitHub仓库的连接，SSH钥匙就好比是一个身份证明，当你想要对GitHub上的仓库进行连接以及修改时，需要出示SSH钥匙。 我先整体阐述一下接下来要做的事 在本地生成SSH钥匙 将本地生成的钥匙添加到GitHub上的仓库中 将仓库的地址拷贝到本地的配置文件中 SSH钥匙的创建在git命令行中输入以下命令 12$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot; //使用GitHub账号创建时的邮箱#这将按照你提供的邮箱地址，创建一对密钥 然后会要求设置密码，可以不用理会，一路回车就好 12Enter passphrase (empty for no passphrase): [Type a passphrase]Enter same passphrase again: [Type passphrase again] //不用理会，一路回车 最后会显示你的SSH钥匙，SSH钥匙分为公钥和秘钥 1234Your identification has been saved in /c/Users/you/.ssh/id_rsa.Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.The key fingerprint is:01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com SSH钥匙的添加到仓库接着将前往SSH钥匙所在的目录(.ssh)，在我的电脑上的位置是C:\\Users\\dell.ssh 打开.ssh文件夹，用记事本打开id_rsa.pub文件，这个文件后缀为pub，代表他是公钥。将里面得内容复制出来。 然后捏，我们打开GitHub中你的仓库,找到Settings。注意，一定要先打开之前创建的，用于储存博客框架的仓库，然后再寻找Settings。 然后将刚才复制的SSH内容粘贴到key中，同时勾选上Allow write acces！！！Title则可以随便写啦 呼呼呼呼，前面一顿操作猛如虎，累的胖友可以停下来喝喝水休息一下。 好了，休息结束 :） 下面我们来确认一下是否SSH公钥配置成功，在Git命令行中输入 1$ ssh -T git@github.com 如果出现以下信息（我相信你的和我差不多），则说明配置成功啦啦啦啦！ 1Hi Novmbrain/Novmbrain.github.io! You've successfully authenticated, but GitHub does not provide shell access. 将仓库地址添加到本地配置文件打开GitHub上的仓库，复制生成的SSH 打开最初在本地创建的用于储存博客的文件夹，找到_config.yml文件，用记事本打开它 找到deploy(一般在最底下)，按照如下格式进行补全，在repository处，粘贴上刚才复制的仓库SSH，下图中是我自己的仓库SSH。 注意！！！！！ 在封号之后需要加一个空格！这是语言硬性要求 部署博客啊啊啊啊，激动人心的时刻终于要到啦！不要急不要急，还差一丢丢 首先，打开git的命令行安装hexo-deployer-git，就是它！这玩意就是一座桥，能够利用使用之前我们配置的SSH，在本地文件夹和远程仓库之间建立连接 输入以下命令 1npm install hexo-deployer-git --save 在安装完成后，最后需要去GitHhub仓库进行一项确认工作，打开GitHub上的仓库的Settings 选择Options，然后往下拉找到GitHub Pages 找到GitHub Pages，确认Branch：选的是master。 需要这一步确认是因为，在Branch通常有两个分支，一个是main（default），另一个是master。我们从本地上传到的是master分支，所以博客储存在master分支下。 ![image-20201227205259917](D:\\development_tools\\blogs\\source_posts\\GitHub Pages配置.png) 然后捏，就很简单了，依次输入以下两个命令 12hexo generatehexo -deploy 此时记得博客就部署完成了，也就是说，全世界的人都能够看到你的博客了。 你的博客地址就是你的项目名，比如我的项目名是Novmrbrian，所以我的博客地址是 https://novmbrain.github.io","link":"/2020/12/27/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/"}],"tags":[],"categories":[]}